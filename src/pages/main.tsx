import { useEffect, useState } from 'react'
import Display from '~/components/Display'
import ElementsLine from '~/components/ElementsLine'
import Head from "next/head";
import { api } from '~/utils/api';
// import Elements from '../server/elements.json'

//https://littlealchemy.com
//http://localhost:3000/main
//https://cloud.mongodb.com/v2/647b96642faffe4cba6843ba#/clusters/connect?clusterId=littleAlchemi
//https://www.pinterest.com/pin/769763761333151110/
//https://create.t3.gg/en/usage/first-steps
//https://github.com/helmturner/t3-mongo-template/blob/main/src/server/db.ts

//https://little-alchemy.fandom.com/wiki/Elements_(Little_Alchemy_1)

//https://www.npmjs.com/package/react-draggable


//https://www.prisma.io/dataguide/mongodb/managing-documents 
//https://www.prisma.io/docs/guides/database/mongodb


type Element = {
  id: string;
  name: string;
  img: string;
  unlocked: boolean
}

type Image = {
  src: string;
  alt: string;
  position: {
    x: number,
    y: number
  }
}

type ImageDOM = {
  alt: string;
  bottom: number,
  height: number,
  left: number,
  right: number,
  top: number,
  width: number,
  x: number,
  y: number,
}

function main() {
  const [images, setImages] = useState<Image[]>([]);
  const [imagesDOM, setImagesDOM] = useState<ImageDOM[]>([])
  const [allElementsDB, setAllElementsDB] = useState<Element[]>([])

  const getAllElementsDB = api.element.getAllElements.useMutation({
    onSuccess: (allElementsUnlocked) => {
      console.log(allElementsUnlocked)
      setAllElementsDB(allElementsUnlocked)
    }
  })

  const changeVisibilityElement = api.element.unlockElement.useMutation({
    onSuccess: (newArrayElements: Image[] | void) => {
      if (newArrayElements !== undefined) {
        console.log(newArrayElements)
        setImages(newArrayElements)
      }
    }
  })

  const resetAllElementsCreated = api.element.reset.useMutation({
    onSuccess: () => {
      setImages([])
      setImagesDOM([])
    }
  })

  function handleReset(){
    resetAllElementsCreated.mutate()

    window.location.reload()
  }

  function handleDrag(){
    changeVisibilityElement.mutate({imageElements: imagesDOM, images})
    getAllElementsDB.mutate()
  }

  useEffect(() => {
    const imageElements: NodeListOf<HTMLImageElement> = document.querySelectorAll('.img-display');
    const imageElementsArray: HTMLImageElement[] = Array.from(imageElements);

    const imagesDOM = imageElementsArray.map((current: HTMLImageElement) => {
      return {
        alt: current.alt,
        bottom: current.getBoundingClientRect().bottom,
        height: current.getBoundingClientRect().height,
        left: current.getBoundingClientRect().left,
        right: current.getBoundingClientRect().right,
        top: current.getBoundingClientRect().top,
        width: current.getBoundingClientRect().width,
        x: current.getBoundingClientRect().x,
        y: current.getBoundingClientRect().y,
      }
    })
    setImagesDOM(imagesDOM)
  }, [images])


  const handleClick = (elementSended: Element) => {
    const newImage: Image = {
      src: elementSended.img,
      alt: elementSended.name,
      position: { x: 0, y: 0 }
    };
    setImages([...images, newImage]);
  };

  const deleteImage = (imageSended: Image, indexSended: number) => {
    setImages(prevImages => prevImages.filter((image, index) =>
      (image !== imageSended) && (index !== indexSended)
    ));
    // setImages(prevImages => prevImages.splice(indexSended, 0));
  }

  const handleImageLoad = (event: React.SyntheticEvent<HTMLImageElement>) => {
    const imageElement = event.target as HTMLImageElement;
    const { x, y } = imageElement.getBoundingClientRect();

    setImages(prevImages => prevImages.map(currentImage => {
      return {
        ...currentImage,
        position: { x, y }
      }
    }));

    getAllElementsDB.mutate()
  };

  return (
    <>
      <Head>
        <title>Little Alchemy - Clone</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="https://littlealchemy.com/img/little-alchemy-1024-logo.png" />
      </Head>
      <div onClick={() => getAllElementsDB.mutate()} data-theme="luxury" className='min-h-screen'>
      {allElementsDB.length === 0 && <h1 className='text-3xl py-2 text-center'>Click anywhere to start</h1>}
        <div className='flex flex-row h-screen max-h-screen overflow-hidden'>
          
          <Display
            images={images}
            deleteImage={deleteImage}
            handleImageLoad={handleImageLoad}
            handleDrag={handleDrag}
            handleReset={handleReset}
          />
          <ElementsLine
            handleClick={handleClick}
            allElementsDB={allElementsDB}
          />
        </div>
      </div>
    </>

  )
}

export default main